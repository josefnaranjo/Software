from abstract import DictGameAbstract

class _Pair():
  def __init__(self, key, data):
    self.key = key
    self.data = data

class HashDict(DictGameAbstract):

  ####
  def __init__(self):
    
    self.MaxValue = 40 # Size of the list
    self.__game_hash_dict = [[] for i in range (self.MaxValue)]
    
  # Get item
  def getitem(self, key):
    # return the list at the index generated by the hash function
    # loop through the list 
    # compare the key to the key stored 
    # return back the data associated with that key
    k = self.hash(key)

    for i in self.__game_hash_dict[k]:
      if i.key == key:
        return i.data

  # Add item
  def additem(self, key, data):
    k = self.hash(key)
    p = _Pair(key, data)
    self.__game_hash_dict[k].append(p)
    
  # Delete item
  def popitem(self, key):
    k = self.hash(key)
    if k == None:
      return None
    else:
      # edit to fix this 
      # return the list at the game index
      # loop through to find the pair of key,data mapping to the key
      # remove that pair object from the list 
      for i in self.__game_hash_dict[k]:
        if i.key == key:
          self.__game_hash_dict[k].remove(i.key)

  # Length of the list/table
  def length(self):
    return len(self.__game_hash_dict)

  # Print function
  def print(self):
    count = 1
    string = ""
    
    for game in self.__game_hash_dict:
      string += "#" + str(count) + " -> " + str(game) + "\n"
      count += 1
      
    print (string)
    
  # Hashing fuction using 'ord' function (ASCII). 
  def hash(self, key):
    h = 0
  
    for letter in str(key):
      h += ord(letter)
    return h % self.MaxValue